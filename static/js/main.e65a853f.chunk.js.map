{"version":3,"sources":["Components/SourceCode.js","App.js","reportWebVitals.js","index.js"],"names":["myObject","one","two","arr","nested_1","fun_1","fun_2","Component","useState","SourceCode","props","state","elementName","elementType","types","number","string","boolean","function","objectMapping","window","location","document","react","React","Accordion","data","isSelected","className","style","marginTop","textAlign","fontSize","Row","Col","Form","Group","controlId","Control","size","as","onChange","e","selectedObject","target","value","setState","Object","keys","this","map","key","index_1","Button","variant","onClick","reload","defaultActiveKey","Card","Toggle","Header","eventKey","display","justifyContent","cursor","fontWeight","Collapse","backgroundColor","Body","Fun","element","undefined","toString","obj","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e65a853f.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\"\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\"\r\nimport data from \"./data.json\"\r\n\r\nconst myObject = {\r\n  one: \"one\",\r\n  two: \"two\",\r\n  arr: [1, { nested_1: \"nested\" }, 3, 4],\r\n  fun_1: function () {\r\n    return \"function_1\"\r\n  },\r\n  fun_2: function () {\r\n    return \"function_2\"\r\n  },\r\n  Component: Component,\r\n  useState: useState,\r\n}\r\nclass SourceCode extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      elementName: \"None\",\r\n      elementType: \"empty\",\r\n      types: {\r\n        number: \"number\",\r\n        string: \"string\",\r\n        boolean: \"boolean\",\r\n        function: \"function\",\r\n      },\r\n      objectMapping: {\r\n        window: window,\r\n        location: document.location,\r\n        myObject: myObject,\r\n        react: React,\r\n        Accordion: Accordion,\r\n        data: data,\r\n      },\r\n      isSelected: false,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container' style={{ marginTop: \"50px\" }}>\r\n        <h1 style={{ textAlign: \"center\", fontSize: \"50px\" }}>\r\n          Let's see behind the Code\r\n        </h1>\r\n\r\n        <Row className='my-3'>\r\n          <Col>\r\n            <Form.Group controlId='element'>\r\n              <Form.Control\r\n                size='lg'\r\n                as='select'\r\n                onChange={e => {\r\n                  var selectedObject = e.target.value\r\n                  if (selectedObject !== \"None\") {\r\n                    this.setState({ elementName: selectedObject })\r\n                    this.setState({\r\n                      elementType: typeof this.state.objectMapping[\r\n                        selectedObject\r\n                      ],\r\n                    })\r\n                    this.setState({ isSelected: true })\r\n                  } else {\r\n                    this.setState({ elementName: \"None\" })\r\n                    this.setState({ elementType: \"Empty\" })\r\n                  }\r\n                }}\r\n              >\r\n                <option>None</option>\r\n                {Object.keys(this.state.objectMapping).map((key, index_1) => {\r\n                  return <option key={index_1}>{key}</option>\r\n                })}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              size='lg'\r\n              variant='dark'\r\n              onClick={() => window.location.reload()}\r\n            >\r\n              Refresh\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        {\r\n          <Accordion defaultActiveKey='0' className='mb-5'>\r\n            <Card>\r\n              <Accordion.Toggle\r\n                as={Card.Header}\r\n                eventKey='0'\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                <span style={{ fontWeight: \"bold\", fontSize: \"30px\" }}>\r\n                  {this.state.elementName}\r\n                </span>\r\n                <span style={{ fontWeight: \"bold\", fontSize: \"30px\" }}>\r\n                  {this.state.elementType}\r\n                </span>\r\n              </Accordion.Toggle>\r\n\r\n              <Accordion.Collapse\r\n                eventKey='0'\r\n                style={{ backgroundColor: \"black\" }}\r\n              >\r\n                <Card.Body>\r\n                  {this.state.objectMapping[this.state.elementName] &&\r\n                    Object.keys(\r\n                      this.state.objectMapping[this.state.elementName]\r\n                    ).map((key, index_1) => {\r\n                      var element = this.state.objectMapping[\r\n                        this.state.elementName\r\n                      ]\r\n                      var Fun\r\n\r\n                      if (this.state.types[typeof element[key]]) {\r\n                        Fun = element[key]\r\n                      }\r\n\r\n                      if (typeof Fun === \"boolean\") {\r\n                        if (Fun) {\r\n                          Fun = \"true\"\r\n                        } else {\r\n                          Fun = \"false\"\r\n                        }\r\n                      }\r\n                      var value\r\n                      if (Fun === undefined)\r\n                        value =\r\n                          element[key] !== null\r\n                            ? element[key].toString()\r\n                            : \"Object Not Accessible\"\r\n                      else if (Fun === \"\") value = \"Empty Value\"\r\n                      else {\r\n                        value = Fun\r\n                      }\r\n\r\n                      return (\r\n                        <Row key={index_1} className='mb-2'>\r\n                          <Col>\r\n                            <Button\r\n                              variant='dark'\r\n                              style={{\r\n                                fontSize: \" 25px\",\r\n                              }}\r\n                            >\r\n                              {index_1 + 1}\r\n                              {\"     \"}\r\n                              {key} :\r\n                              {\r\n                                typeof this.state.objectMapping[\r\n                                  this.state.elementName\r\n                                ][key]\r\n                              }\r\n                            </Button>\r\n                          </Col>\r\n                          <Col>\r\n                            <Button\r\n                              variant={Fun === undefined ? \"danger\" : \"dark\"}\r\n                              onClick={() => {\r\n                                if (typeof element[key] === \"object\") {\r\n                                  var obj = {\r\n                                    ...this.state.objectMapping,\r\n                                  }\r\n                                  obj[key] = element[key]\r\n\r\n                                  this.setState({ objectMapping: obj })\r\n                                  this.setState({ elementName: key })\r\n                                  this.setState({\r\n                                    elementType: typeof element[key],\r\n                                  })\r\n                                }\r\n                              }}\r\n                              style={{\r\n                                fontSize: \" 25px\",\r\n                                width: \"inherit\",\r\n                              }}\r\n                            >\r\n                              {typeof value === \"function\"\r\n                                ? value.toString()\r\n                                : value}\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      )\r\n                    })}\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          </Accordion>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SourceCode\r\n","import SourceCode from \"./Components/SourceCode\"\nimport \"./App.css\"\nfunction App() {\n  return <SourceCode />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}